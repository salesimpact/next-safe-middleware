const isReportToItem=x=>{if(typeof x!=="object"){return false}const requiredKeys=["type","body"];const itemKeys=Object.keys(x);return requiredKeys.every(key=>itemKeys.includes(key))};const isReportToPayload=x=>{return Array.isArray(x)&&x.every(isReportToItem)};const isCspReportUriPayload=x=>{return typeof x==="object"&&!!x["csp-report"]};const isReportingData=x=>{return typeof x==="object"&&["csp-report-uri","report-to"].includes(x["kind"]||"")};const maybeArr=x=>x.startsWith("[");const maybeObj=x=>x.startsWith("{");const deepJsonParse=x=>{if(typeof x==="string"&&(maybeArr(x)||maybeObj(x))){try{return JSON.parse(x)}catch{return x}}if(typeof x==="object"){return Object.fromEntries(Object.entries(x).map(([k,v])=>[k,deepJsonParse(v)]))}if(Array.isArray(x)){return x.map(deepJsonParse)}return x};const extractReportingData=x=>{if(isReportingData(x)){return x}const payload=deepJsonParse(x);if(isCspReportUriPayload(payload)){return{kind:"csp-report-uri",payload}}if(isReportToPayload(payload)){return{kind:"report-to",payload}}return undefined};const cspReportUriRequestsFromReportTo=(cspReportUriEndpoint,reportToPayload)=>{return reportToPayload.filter(({type,body})=>type==="csp-violation"&&!!body).map(({body,user_agent})=>{const{disposition,documentURL,effectiveDirective,originalPolicy,blockedURL,lineNumber,referrer,sample,sourceFile,statusCode}=body;const cspReport={"csp-report":{"blocked-uri":blockedURL||"","violated-directive":effectiveDirective,"source-file":sourceFile||"","original-policy":originalPolicy,"document-uri":documentURL,"script-sample":sample||"","line-number":lineNumber||0,"column-number":0,referrer:referrer||""}};return fetch(cspReportUriEndpoint,{method:"POST",body:JSON.stringify(cspReport),headers:{"user-agent":user_agent,"content-type":"application/json"}})})};const sentryCspReporterForEndpoint=sentryCspEndpoint=>async(data,req)=>{if(data.kind==="csp-report-uri"){const userAgent=req.headers["user-agent"];await fetch(sentryCspEndpoint,{method:"POST",body:JSON.stringify(data.payload),headers:{"user-agent":userAgent,"content-type":"application/json"}});return}if(data.kind==="report-to"){await Promise.allSettled(cspReportUriRequestsFromReportTo(sentryCspEndpoint,data.payload));return}};const reportingApiHandler=(...reporters)=>async(req,res)=>{try{const data=extractReportingData(req.body);if(data){await Promise.allSettled(reporters.map(async reporter=>{reporter(data,req)}));res.status(202).end();return}}finally{res.status(422).end()}};export{reportingApiHandler as reporting,sentryCspReporterForEndpoint}
